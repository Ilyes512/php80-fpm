name: Build Docker images

on:
  push:
    branches: [master]
    tags: ['*']
  pull_request:

jobs:
  pre_job:
    continue-on-error: true
    runs-on: ubuntu-18.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          github_token: ${{ github.token }}
          paths: '["Dockerfile", "files/**", ".github/workflows/**"]'

  build_docker_images:
    name: Build Docker images
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-18.04
    steps:
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ilyes512/php80-fpm
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/master ]]; then
            VERSION=latest
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          RUNTIME_TAGS="${DOCKER_IMAGE}:runtime-${VERSION}"
          BUILDER_TAGS="${DOCKER_IMAGE}:builder-${VERSION}"
          BUILDER_NODEJS_TAGS="${DOCKER_IMAGE}:builder-nodejs-${VERSION}"
          VSCODE_TAGS="${DOCKER_IMAGE}:vscode-${VERSION}"
          if [[ "${{ github.event_name }}" == "push" && $GITHUB_REF != refs/tags/* ]]; then
            RUNTIME_TAGS="$RUNTIME_TAGS,${DOCKER_IMAGE}:runtime-sha-${GITHUB_SHA::8}"
            BUILDER_TAGS="$BUILDER_TAGS,${DOCKER_IMAGE}:builder-sha-${GITHUB_SHA::8}"
            BUILDER_NODEJS_TAGS="$BUILDER_NODEJS_TAGS,${DOCKER_IMAGE}:builder-nodejs-sha-${GITHUB_SHA::8}"
            VSCODE_TAGS="$VSCODE_TAGS,${DOCKER_IMAGE}:vscode-sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=runtime_tags::${RUNTIME_TAGS}
          echo ::set-output name=builder_tags::${BUILDER_TAGS}
          echo ::set-output name=builder_nodejs_tags::${BUILDER_NODEJS_TAGS}
          echo ::set-output name=vscode_tags::${VSCODE_TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build runtime target
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          target: runtime
          tags: ${{ steps.prep.outputs.runtime_tags }}
          cache-from: type=registry,ref=${{ steps.prep.outputs.docker_image }}:runtime-latest
          cache-to: type=inline
          build-args: |
            VCS_REF=${{ github.sha }}
            CREATED=${{ steps.prep.outputs.created }}
      - name: Build builder target
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          target: builder
          tags: ${{ steps.prep.outputs.builder_tags }}
          cache-from: type=registry,ref=${{ steps.prep.outputs.docker_image }}:builder-latest
          cache-to: type=inline
          build-args: |
            VCS_REF=${{ github.sha }}
            CREATED=${{ steps.prep.outputs.created }}
      - name: Build builder with nodejs target
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          target: builder_nodejs
          tags: ${{ steps.prep.outputs.builder_nodejs_tags }}
          cache-from: type=registry,ref=${{ steps.prep.outputs.docker_image }}:builder-nodejs-latest
          cache-to: type=inline
          build-args: |
            VCS_REF=${{ github.sha }}
            CREATED=${{ steps.prep.outputs.created }}
      - name: Build vscode target
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          target: vscode
          tags: ${{ steps.prep.outputs.vscode_tags }}
          cache-from: type=registry,ref=${{ steps.prep.outputs.docker_image }}:vscode-latest
          cache-to: type=inline
          build-args: |
            VCS_REF=${{ github.sha }}
            CREATED=${{ steps.prep.outputs.created }}
